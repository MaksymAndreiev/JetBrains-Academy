type: edu
custom_name: I am an Alchemist!
files:
- name: todolist/todolist.py
  visible: true
  text: |
    # Write your code here
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from sqlalchemy.ext.declarative import declarative_base
    from sqlalchemy import Column, Integer, String, Date
    from hstest.check_result import CheckResult
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from datetime import datetime
    from typing import List
    import os
    import shutil

    from sqlalchemy import create_engine
    from sqlalchemy.orm import sessionmaker

    menu = """
    1) Today's tasks
    2) Add task
    0) Exit
    """.strip().lower()


    class ToDoList(StageTest):
        db_name = 'todo.db'
        is_completed = False

        def generate(self) -> List[TestCase]:
            return [
                TestCase(
                    stdin='0',
                    check_function=ToDoList.check_menu
                ),
                TestCase(
                    stdin='0',
                    check_function=self.check_db_file
                ),
                TestCase(
                    stdin=[self.clear_table,
                           self.check_empty_list,
                           self.check_added_task]

                )
            ]

        @staticmethod
        def check_menu(reply, attach):
            if menu in reply.lower():
                return CheckResult.correct()
            else:
                return CheckResult.wrong('Your program doesn\'t show the menu from example.\n'
                                         ' Make sure you didn\'t print any extra spaces')

        def check_db_file(self, reply, attach):
            if not os.path.exists('todo.db'):
                return CheckResult.wrong('You didn\'t create the database file. It should be name todo.db')
            shutil.copy2('todo.db', 'temp.db')

            tables_in_db = self.execute('SELECT  name FROM sqlite_master '
                                        'WHERE type =\'table\' AND name '
                                        'NOT LIKE \'sqlite_%\';')
            try:
                tables_in_db = [table[0] for table in tables_in_db]
            except Exception:
                return CheckResult.wrong('Your database or its content are written in the wrong format.')
            if 'task' not in tables_in_db:
                return CheckResult.wrong('Your database doesn\'t have \'task\' table.')

            columns_in_table = self.execute('PRAGMA table_info(task)')
            columns_in_table = [[*column[1:3]] for column in columns_in_table]
            correct_columns = ['id', 'INTEGER'], ['task', 'VARCHAR'], ['deadline', 'DATE']
            for column in correct_columns:
                if column not in columns_in_table:
                    return CheckResult.wrong(
                        'Your table should contain \'{}\' column with \'{}\' type'.format(column[0], column[1]))
            return CheckResult.correct()

        def clear_table(self, output):
            self.execute('DELETE FROM task')
            return '1'

        def check_empty_list(self, output):
            if 'nothing' not in output.lower():
                return CheckResult.wrong('When the to-do list is empty you should output \'Nothing to do!\'')
            return '2\nFirst task\n2\nSecond task\n1'

        def check_added_task(self, output):
            tasks = self.execute('SELECT * FROM task')
            if not tasks:
                return CheckResult.wrong('You should save tasks in the database!')
            for task in tasks:
                task = list(task)
                if 'First task' in task:
                    today = datetime.today().date()
                    if not str(today) in task:
                        return CheckResult.wrong('By default deadline column should be today\' date: {}'.format(today))
                    break
            else:
                return CheckResult.wrong('You didn\'t save just added task!')
            for task in tasks:
                task = list(task)
                if 'Second task' in task:
                    break
            else:
                return CheckResult.wrong('You didn\'t save just added task!')
            self.is_completed = True
            return CheckResult.correct()

        def after_all_tests(self):
            if not os.path.exists('todo.db'):
                return
            with open('todo.db', 'w') as main_db:
                if os.path.exists('temp.db'):
                    temp_file = open('temp.db', 'r')
                    main_db.write(temp_file.read())
                    temp_file.close()
                    os.remove('temp.db')

        def check(self, reply, attach):
            if self.is_completed:
                self.is_completed = False
                return CheckResult.correct()
            else:
                return CheckResult.wrong('Your program doesn\'t read all inputs!')

        def execute(self, query: str):
            db = DbTool('main.db')
            try:
                result = db.session.execute(query).fetchall()
            except Exception:
                result = None
            db.session.close()
            return result


    class DbTool:

        def __init__(self, file):
            self.engine = create_engine('sqlite:///todo.db?check_same_thread=false')
            self.session = sessionmaker(bind=self.engine)()

        def close(self):
            self.session.close()

        Base = declarative_base()

        class Task(Base):
            __tablename__ = 'task'
            id = Column(Integer, primary_key=True)
            task = Column(String)
            deadline = Column(Date)


    if __name__ == '__main__':
        ToDoList('todolist.todolist').run_tests()
  learner_created: false
- name: todo.db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/105/stages/571/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 18 Apr 2021 16:46:41 UTC
record: -1
