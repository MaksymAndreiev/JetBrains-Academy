type: edu
files:
- name: scraper.py
  visible: true
  learner_created: false
- name: tests.py
  visible: false
  text: "import ast\nimport re\n\nfrom hstest.check_result import CheckResult\nfrom\
    \ hstest.stage_test import StageTest\nfrom hstest.test_case import TestCase\n\n\
    \nclass WebScraperTest(StageTest):\n    def generate(self):\n        return [TestCase(stdin=\"\
    https://www.imdb.com/title/tt10048342/\", check_function=self.check_queens_gambit,\n\
    \                         time_limit=50000),\n                TestCase(stdin=\"\
    https://www.imdb.com/title/tt0068646/\", check_function=self.check_godfather,\n\
    \                         time_limit=50000),\n                TestCase(stdin=\"\
    https://www.imdb.com/name/nm0001191/\", check_function=self.check_incorrect_url,\n\
    \                         time_limit=50000),\n                TestCase(stdin=\"\
    https://www.google.com/\", check_function=self.check_incorrect_url, time_limit=50000)]\n\
    \n    def check_incorrect_url(self, reply, attach=None):\n        if \"Invalid\
    \ movie page!\" in reply:\n            return CheckResult.correct()\n        else:\n\
    \            return CheckResult.wrong(\"\"\"If the link does not contain movie\
    \ info or not an IMDB resource, \n            please respond with 'Invalid movie\
    \ page!' message!\"\"\")\n\n    def check_queens_gambit(self, reply, attach=None):\n\
    \        possible_descriptions = [\"prodigious introvert Beth Harmon discovers\
    \ and masters the game of chess\"]\n        output = re.search('({.+})', reply)\n\
    \        if output is None:\n            return CheckResult.wrong(\"Output dictionary\
    \ was expected.\\n\"\n                                     \"However, it was not\
    \ found.\")\n        try:\n            reply_dict = ast.literal_eval(output.group(0))\n\
    \        except SyntaxError:\n            return CheckResult.wrong(\"An error\
    \ occurred while your output was being parsed.\\n\"\n                        \
    \             \"Make sure you output a dictionary and its keys and values contain\
    \ no HTML tags.\")\n        except AttributeError:\n            return CheckResult.wrong(\"\
    An error occurred while your output was being parsed.\\n\"\n                 \
    \                    \"Make sure you output a dictionary and its keys and values\
    \ contain no HTML tags.\")\n        if 'title' not in reply_dict:\n          \
    \  return CheckResult.wrong(\"There's no \\'title\\' field in your output.\")\n\
    \        if 'description' not in reply_dict:\n            return CheckResult.wrong(\"\
    There's no \\'description\\' field in your output.\")\n        user_description\
    \ = reply_dict[\"description\"]\n        title = reply_dict[\"title\"]\n     \
    \   if not title or not user_description:\n            return CheckResult.wrong(\"\
    Seems like there is a title or a description missing in the output dictionary.\"\
    )\n        if type(user_description) != str or type(title) != str:\n         \
    \   return CheckResult.wrong(\"The values of keys 'title' and 'description' should\
    \ be strings.\\n\"\n                                     \"However, it seems that\
    \ in your output the type of one or both of these values isn't string.\")\n  \
    \      correct_descriptions = sum([description.lower().strip() in user_description.lower().strip()\
    \ for description in possible_descriptions]) > 0\n        if \"The Queen's Gambit\"\
    \ in title and correct_descriptions:\n            return CheckResult.correct()\n\
    \        else:\n            return CheckResult.wrong(\"Title or description in\
    \ returned dict do not seem to be correct.\")\n\n    def check_godfather(self,\
    \ reply, attach=None):\n        possible_descriptions = [\"An organized crime\
    \ dynasty's aging patriarch transfers control of his clandestine empire to his\
    \ reluctant son\",\n                                 \"The aging patriarch of\
    \ an organized crime dynasty transfers control of his clandestine empire to his\
    \ reluctant son.\"]\n        output = re.search('({.+})', reply)\n        if output\
    \ is None:\n            return CheckResult.wrong(\"Output dictionary was expected.\\\
    n\"\n                                     \"However, it was not found.\")\n  \
    \      try:\n            reply_dict = ast.literal_eval(output.group(0))\n    \
    \    except SyntaxError:\n            return CheckResult.wrong(\"An error occurred\
    \ while your output was being parsed.\\n\"\n                                 \
    \    \"Make sure you output a dictionary and its keys and values contain no HTML\
    \ tags.\")\n        if 'title' not in reply_dict:\n            return CheckResult.wrong(\"\
    There's no \\'title\\' field in your output.\")\n        if 'description' not\
    \ in reply_dict:\n            return CheckResult.wrong(\"There's no \\'description\\\
    ' field in your output.\")\n        title = reply_dict.get(\"title\")\n      \
    \  desc = reply_dict.get(\"description\")\n        if not title or not desc:\n\
    \            return CheckResult.wrong(\"Seems like there is a title or a description\
    \ missing in the output dictionary.\")\n        user_description = reply_dict[\"\
    description\"]\n        if type(user_description) != str or type(title) != str:\n\
    \            return CheckResult.wrong(\"The values of keys 'title' and 'description'\
    \ should be strings.\\n\"\n                                     \"However, it\
    \ seems that in your output the type of one or both of these values isn't string.\"\
    )\n        correct_descriptions = sum([description.lower().strip() in user_description.lower().strip()\
    \ for description in possible_descriptions]) > 0\n        if \"Godfather\" in\
    \ reply_dict[\"title\"] and correct_descriptions:\n            return CheckResult.correct()\n\
    \        else:\n            return CheckResult.wrong(\"Title or description in\
    \ returned dict do not seem to be correct.\")\n\n\nif __name__ == '__main__':\n\
    \    WebScraperTest().run_tests()\n"
  learner_created: false
feedback_link: https://hyperskill.org/projects/145/stages/782/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 01 Apr 2021 12:03:00 UTC
record: 2
